#!/bin/bash

DEFAULT_MSG="common update"
RETRY=1
CURRENT_BRANCH=$(git branch --show-current)

tolower() {
   echo $1 | awk '{print tolower($0)}'
}

function log() {
   if [[ $LOG -eq 1 ]]; then
      echo "$1"
   fi
}

function readStd() {
   log "reading stdin"
   while read -r line; do
      DIFFS="$DIFFS$line"
   done
}

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -g|--global) GLOBAL=1; ;;
        #-r|--retry) RETRY=1; ;;
        -v|--verbose) LOG=1; ;;
        -) readStd; shift ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

function use_global() {
   log "using global"
   MAIN=$(git symbolic-ref refs/remotes/origin/HEAD)
   MAIN="${MAIN##*/}"
   DIFFS=$(git diff --oneline --no-merges $MAIN..$CURRENT_BRANCH)
}

if [[ $GLOBAL -eq 1 ]]; then
   use_global
elif [ -z "$DIFFS" ]; then
   DIFFS=$(git diff)
fi

SIZE=${#DIFFS}
log "current message size: $SIZE"

if [ $SIZE -lt 10 ]; then
    echo "Not too much changes. Exiting with default message"
    export AI_MESSAGE_AUTOCOMMIT=$DEFAULT_MSG
    exit 0
 elif [ $SIZE -gt 500000 ]; then
   log "too much message size: $SIZE, fallback to global usage"
   use_global
fi

PROMPT1=$(cat <<EOF
Prompt:
Generate a commit message that includes the following changes:
$DIFFS

Instruction: 
Your commit message should based only on changes i gave you.
Your commit message should start with summirized message without "-" symbol and should be no longer than 50 characters.
Message should include detailed description which should be from 30 to 200 characters. 
Detailed messages should follow after the summary message and starts with "-" symbol, to separate the messages pretty.
Please note that in the passed changes the lines that start with "-" are the deleted lines, the lines that start with "+" are the newly added changes, use this information in your commit message.

Main commit message format:
<summary message>
- <description of change 1>
- <description of change 2>
- ...
- <description of change n>

Example generated commit message:

Implement org structure retrieving
- add org structure retrieving.
- add service properties.

or

Refactor state handler and fix bugs
- refactor ManagerStateHandler, add null check on state creation.
- minor enhancements in UserController.
EOF
)

PROMPT2=$(cat <<EOF
Prompt:
Generate a commit message based on the following changes. The message should be concise, no longer than 72 characters, and start with an imperative verb:
$DIFFS

Example of a generated commit message:

Add notification system feature, minor fixes added
- Implement notifications system, optimize DB queries, update deps, fix auth vulnerability
EOF
)

# TODO add prompts
arr=("$PROMPT1" "$PROMPT2")

next_prompt() {
    counter=0

    index=$((counter % ${#arr[@]}))
    local ELEMENT=${arr[$index]}
    ((counter++))

    TEMP_MSG_FILE=/tmp/ghelp_autocommit_$(date +%H%M%S).tmp
    log "Making 'Gigachat' request with conent:"
    log "$ELEMENT"

    MESSAGE=$(echo $ELEMENT | gigachat -n -)
    
    echo "$MESSAGE" > $TEMP_MSG_FILE
    cat $TEMP_MSG_FILE

    export AI_MESSAGE_AUTOCOMMIT="$MESSAGE"
}

call() {

    next_prompt

    read -p "Accept message? (Y/N): " ACCEPT <&1

    ACCEPT=$(tolower $ACCEPT)

    if ! [[ -z "${ACCEPT}" || "$ACCEPT" = "y" ]]; then 
       read -p "Try another prompt? (Y/N) : " ANOTHER <&1
        ANOTHER=$(tolower $ANOTHER)

        if [[ -z "${ANOTHER}" || "$ANOTHER" == "y" ]]; then 
            call
        else 
            exit 0
        fi
     else 
      read -r -p "Edit message? (Y/N) : " EDIT <&1
      EDIT=$(tolower $EDIT)
      if [[ -z "${EDIT}" || "$EDIT" == "y" ]]; then
         vim "$TEMP_MSG_FILE" <&1
         MESSAGE=$(cat $TEMP_MSG_FILE) 
         export AI_MESSAGE_AUTOCOMMIT="$MESSAGE"
      fi
    fi
}

if [ $RETRY -eq 1 ]; then
    call
else 
    next_prompt
fi

